{"ast":null,"code":"import axios from \"axios\";\nimport cookie from \"react-cookies\";\nimport { Cookies } from \"react-cookie\";\nexport const signInApi = async data => {\n  const response = await axios.post(\"http://localhost:4000/api/auth/signIn\", data).catch(error => null);\n  if (!response) return null;\n  const token = response.data.data['token'];\n  const expires = new Date();\n  const exprTime = response.data.data['exprTime'];\n  expires.setMilliseconds(expires.getMilliseconds() + exprTime);\n  const cookies = new Cookies();\n  cookies.set('token', token, {\n    expires\n  });\n  const result = token.sub;\n  //나중에 수정\n  return result;\n};\nexport const signUpApi = async data => {\n  const response = await axios.post(\"http://localhost:4000/api/auth/signUp\", data).catch(error => null);\n  if (!response) return null;\n  const result = response.data;\n  return result;\n};\nexport const writeApi = async data => {\n  const response = await instance.post(\"/api/board/write\", data, {\n    withCredentials: true\n  }\n  //const token = document.cookie.split(\"; \").find(row => row.startsWith(\"token=\"))?.split(\"=\")[1];  쿠키를 클라이언트에서 다루는것은 별로 안좋다\n  //const headers: { Authorization?: string } = {};                                                  애초에 쿠키는 위험  \n  // {headers: {                                                                                     interceptor 에서 useCookie 사용하였으나 Hook걸려서(?) 실패\n  //     'Authorization': `Bearer ${token}`                                                          그나마 괜춘은 방법은 react-cookies사용이란다. 사실 여기부턴 영역밖.\n  //   }}\n  //                          사실 제일 좋은 방법은: 쿠키를 스프링에 날려서 그걸 헤더로 인식하게 하는것! 다른 구현 마치면 꼭 시도해 볼것!\n  ).catch(error => null);\n  if (!response) return null;\n  const result = response.data;\n  return result;\n};\nconst baseURL = \"http://localhost:4000\";\nconst instance = axios.create({\n  baseURL,\n  //기본  루트 url\n  timeout: 20000\n});\ninstance.interceptors.request.use(config => {\n  //하나하나 헤더 넣어주면 간지가 없음\n  const token = cookie.load(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\ninstance.interceptors.response.use(config => {\n  //config => axios request/뭐든 하기 전에 실행됨 여기서 이 친구는 헤더 로깅인포등을 바꿔줄수있...?70% 확신 \n  const token = cookie.load(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport default instance;","map":{"version":3,"names":["axios","cookie","Cookies","signInApi","data","response","post","catch","error","token","expires","Date","exprTime","setMilliseconds","getMilliseconds","cookies","set","result","sub","signUpApi","writeApi","instance","withCredentials","baseURL","create","timeout","interceptors","request","use","config","load","headers","Authorization"],"sources":["/Users/u-keunsong/IdeaProjects/DANGDO/dangdo-react/src/apis/index.ts"],"sourcesContent":["import axios from \"axios\";\r\nimport cookie from \"react-cookies\";\r\nimport { Cookies, useCookies } from \"react-cookie\";\r\nimport jwt_decode from \"jwt-decode\";\r\n\r\n\r\nexport const signInApi = async (data: any) => {\r\n    const response = await axios.post(\"http://localhost:4000/api/auth/signIn\", data).catch((error) => null);\r\n    if(!response) return null;\r\n   \r\n    const token = response.data.data['token']\r\n\r\n    const expires = new Date();\r\n    const exprTime = response.data.data['exprTime'];\r\n   \r\n    expires.setMilliseconds(expires.getMilliseconds() + exprTime);\r\n    const cookies = new Cookies();\r\n\r\n    cookies.set('token', token, { expires }); \r\n\r\n    const result = token.sub;\r\n    //나중에 수정\r\n    return result \r\n}\r\n\r\nexport const signUpApi = async (data: any) => {\r\n    const response = await axios.post(\"http://localhost:4000/api/auth/signUp\", data).catch((error) => null);\r\n    if(!response) return null;\r\n\r\n    const result = response.data;\r\n    return result \r\n}\r\n\r\nexport const writeApi = async (data: any) => {\r\n  \r\n  \r\n    const response = await instance.post(\"/api/board/write\", data,{withCredentials: true},\r\n    //const token = document.cookie.split(\"; \").find(row => row.startsWith(\"token=\"))?.split(\"=\")[1];  쿠키를 클라이언트에서 다루는것은 별로 안좋다\r\n    //const headers: { Authorization?: string } = {};                                                  애초에 쿠키는 위험  \r\n    // {headers: {                                                                                     interceptor 에서 useCookie 사용하였으나 Hook걸려서(?) 실패\r\n    //     'Authorization': `Bearer ${token}`                                                          그나마 괜춘은 방법은 react-cookies사용이란다. 사실 여기부턴 영역밖.\r\n    //   }}\r\n    //                          사실 제일 좋은 방법은: 쿠키를 스프링에 날려서 그걸 헤더로 인식하게 하는것! 다른 구현 마치면 꼭 시도해 볼것!\r\n      ).catch((error) => null);\r\n  \r\n    if(!response) return null;\r\n\r\n    const result = response.data;\r\n    return result \r\n}\r\n\r\nconst baseURL= \"http://localhost:4000\"\r\nconst instance = axios.create({\r\n    baseURL, //기본  루트 url\r\n    timeout: 20000,\r\n \r\n});\r\ninstance.interceptors.request.use((config) => {             //하나하나 헤더 넣어주면 간지가 없음\r\n    const token = cookie.load(\"token\"); \r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  });\r\n\r\ninstance.interceptors.response.use((config) => {    //config => axios request/뭐든 하기 전에 실행됨 여기서 이 친구는 헤더 로깅인포등을 바꿔줄수있...?70% 확신 \r\n    const token=cookie.load(\"token\");\r\n    if(token){\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n}   return config;\r\n});\r\n  export default instance;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,OAAO,QAAoB,cAAc;AAIlD,OAAO,MAAMC,SAAS,GAAG,MAAOC,IAAS,IAAK;EAC1C,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,uCAAuC,EAAEF,IAAI,CAAC,CAACG,KAAK,CAAEC,KAAK,IAAK,IAAI,CAAC;EACvG,IAAG,CAACH,QAAQ,EAAE,OAAO,IAAI;EAEzB,MAAMI,KAAK,GAAGJ,QAAQ,CAACD,IAAI,CAACA,IAAI,CAAC,OAAO,CAAC;EAEzC,MAAMM,OAAO,GAAG,IAAIC,IAAI,EAAE;EAC1B,MAAMC,QAAQ,GAAGP,QAAQ,CAACD,IAAI,CAACA,IAAI,CAAC,UAAU,CAAC;EAE/CM,OAAO,CAACG,eAAe,CAACH,OAAO,CAACI,eAAe,EAAE,GAAGF,QAAQ,CAAC;EAC7D,MAAMG,OAAO,GAAG,IAAIb,OAAO,EAAE;EAE7Ba,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEP,KAAK,EAAE;IAAEC;EAAQ,CAAC,CAAC;EAExC,MAAMO,MAAM,GAAGR,KAAK,CAACS,GAAG;EACxB;EACA,OAAOD,MAAM;AACjB,CAAC;AAED,OAAO,MAAME,SAAS,GAAG,MAAOf,IAAS,IAAK;EAC1C,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,uCAAuC,EAAEF,IAAI,CAAC,CAACG,KAAK,CAAEC,KAAK,IAAK,IAAI,CAAC;EACvG,IAAG,CAACH,QAAQ,EAAE,OAAO,IAAI;EAEzB,MAAMY,MAAM,GAAGZ,QAAQ,CAACD,IAAI;EAC5B,OAAOa,MAAM;AACjB,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAG,MAAOhB,IAAS,IAAK;EAGzC,MAAMC,QAAQ,GAAG,MAAMgB,QAAQ,CAACf,IAAI,CAAC,kBAAkB,EAAEF,IAAI,EAAC;IAACkB,eAAe,EAAE;EAAI;EACpF;EACA;EACA;EACA;EACA;EACA;EAAA,CACG,CAACf,KAAK,CAAEC,KAAK,IAAK,IAAI,CAAC;EAE1B,IAAG,CAACH,QAAQ,EAAE,OAAO,IAAI;EAEzB,MAAMY,MAAM,GAAGZ,QAAQ,CAACD,IAAI;EAC5B,OAAOa,MAAM;AACjB,CAAC;AAED,MAAMM,OAAO,GAAE,uBAAuB;AACtC,MAAMF,QAAQ,GAAGrB,KAAK,CAACwB,MAAM,CAAC;EAC1BD,OAAO;EAAE;EACTE,OAAO,EAAE;AAEb,CAAC,CAAC;AACFJ,QAAQ,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAAc;EACxD,MAAMpB,KAAK,GAAGR,MAAM,CAAC6B,IAAI,CAAC,OAAO,CAAC;EAClC,IAAIrB,KAAK,EAAE;IACToB,MAAM,CAACE,OAAO,CAACC,aAAa,GAAI,UAASvB,KAAM,EAAC;EAClD;EACA,OAAOoB,MAAM;AACf,CAAC,CAAC;AAEJR,QAAQ,CAACK,YAAY,CAACrB,QAAQ,CAACuB,GAAG,CAAEC,MAAM,IAAK;EAAK;EAChD,MAAMpB,KAAK,GAACR,MAAM,CAAC6B,IAAI,CAAC,OAAO,CAAC;EAChC,IAAGrB,KAAK,EAAC;IACToB,MAAM,CAACE,OAAO,CAACC,aAAa,GAAI,UAASvB,KAAM,EAAC;EACpD;EAAI,OAAOoB,MAAM;AACjB,CAAC,CAAC;AACA,eAAeR,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}